import time
import random
import statistics

# CONSTANTS (weights - grams)
goal = 50000
numTurtles = 20  # number of breeding turtles in each gen
initialMinWeight = 200
initialMaxWeight = 600
initialModeWeight = 300
mutateOdds = 0.01
mutateMin = 0.5
mutateMax = 1.2
litterSize = 8
littersPerYear = 10
generationLimit = 500

# even-number of turtles for breeding pairs
if numTurtles % 2 != 0:
  numTurtles += 1


def populate(num_turtles, min_weight, max_weight, mode_weight):
  #start population with triangular distribution of weights?
  return [int(random.triangular(min_weight, max_weight, mode_weight))\
          for i in range(num_turtles)]


def fitness(population, goal):
  #measure population fitness -- attribute mean vs target
  ave = statistics.mean(population)
  return ave / goal


def select(population, to_retain):
  #limit population
  sorted_population = sorted(population)
  to_retain_by_sex = to_retain // 2
  members_per_sex = len(sorted_population) // 2
  females = sorted_population[:members_per_sex]
  males = sorted_population[members_per_sex:]
  selected_females = females[-to_retain_by_sex:]
  selected_males = males[-to_retain_by_sex:]
  return selected_males, selected_females


def breed(males, females, litter_size):
  #cross over genes
  random.shuffle(males)
  random.shuffle(females)
  children = []
  for male, female in zip(males, females):
    for child in range(litter_size):
      child = random.randint(female, male)
      children.append(child)
  return children


def mutate(children, mutate_odds, mutate_min, mutate_max):
  #randomly alter turtle weights -- input odds & fractional changes
  for index, rat in enumerate(children):
    if mutate_odds >= random.random():
      children[index] = round(rat * random.uniform(mutate_min, mutate_max))
  return children


def main():
  """Initialize population, select, breed, and mutate, display results."""
  generations = 0

  parents = populate(numTurtles, initialMinWeight, initialMaxWeight, initialModeWeight)
  print("initial population weights = {}".format(parents))
  population_fitness = fitness(parents, goal)
  print("initial population fitness = {}".format(population_fitness))
  print("number to retain = {}".format(numTurtles))

  ave_wt = []

  while population_fitness < 1 and generations < generationLimit:
    selected_males, selected_females = select(parents, numTurtles)
    children = breed(selected_males, selected_females, litterSize)
    children = mutate(children, mutateOdds, mutateMin, mutateMax)
    parents = selected_males + selected_females + children
    population_fitness = fitness(parents, goal)
    print("Generation {} fitness = {:.4f}".format(generations, population_fitness))
    ave_wt.append(int(statistics.mean(parents)))
    generations += 1

  print("average weight per generation = {}".format(ave_wt))
  print("\nnumber of generations = {}".format(generations))
  print("number of years = {}".format(int(generations / littersPerYear)))


if __name__ == '__main__':
  start_time = time.time()
  main()
  end_time = time.time()
  duration = end_time - start_time
  print("\nRuntime for this program was {} seconds.".format(duration))
